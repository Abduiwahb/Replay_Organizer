#!/usr/bin/env bash
set -eu

#Change ReplayDir variable to where you want to save your replays
#Add or remove classes in WhiteListApps variable, if the ones included don't serve your needs

#This script is only intended to run with GPU-screen-recorder under -sc flag.
#It also doesn't have any functionality for native games unless you add its class to WhiteListApps variable.
#It simply checks if the window class has steam_* or exe in it, so it can fetch the window name and create a directory and move the replay into it.
#Something similar can be done with regular recordings.

GetWindowInfo() {

    case $XDG_SESSION_TYPE in

        x11)
            #Requires xdotool
            WindowClass=`xdotool getactivewindow getwindowclassname`
            WindowTitle=`xdotool getactivewindow getwindowname`

        ;;

        wayland)

            case $XDG_CURRENT_DESKTOP in

                KDE)
                    #Requires kdotool
                    WindowClass=`kdotool getactivewindow getwindowclassname`
                    WindowTitle=`kdotool getactivewindow getwindowname`

                ;;

                Hyprland)
                    #Requires jq
                    WindowClass=`hyprctl activewindow -j  | jq -r '.class'`
                    WindowTitle=`hyprctl activewindow -j | jq -r '.title'`

                ;;

                GNOME)
                    #Requires Window-calls-extended https://github.com/hseliger/window-calls-extended untested
                    WindowClass=`gdbus call --session --dest org.gnome.Shell --object-path /org/gnome/Shell/Extensions/WindowsExt --method org.gnome.Shell.Extensions.WindowsExt.FocusClass | cut -d \' -f2`
                    WindowTitle=`gdbus call --session --dest org.gnome.Shell --object-path /org/gnome/Shell/Extensions/WindowsExt --method org.gnome.Shell.Extensions.WindowsExt.FocusTitle | cut -d \' -f2 `
                ;;

                *)
                    echo "Unsupported desktop environment. Exiting."
                    exit 1
                ;;
            esac
        ;;

        *)
            echo "Unknown session type. Exiting."
            exit 1
        ;;
    esac
}

Notify () {

    #local ReplayName="$(basename --suffix=".mkv" "$1" )" # I don't know which one is more effecient for naming the thumbnail, basename or date
    local Date=$(date +"%Y-%m-%d_%H:%M:%S")
    #ffmpeg -i $1 -s 640x360 -ss 5 -vframes 1 "/tmp/thumb_$Date.png"
    ffmpegthumbnailer -i "$1" -q 0 -s 480 -o "/tmp/thumb_$Date.png"
    case $(notify-send -a "GSR" "GSR" "Replay saved" -i "/tmp/thumb_$Date.png" --action play="Play replay" --action delete="Delete replay" -t 5000 -u normal) in

      play)
        xdg-open "$1"
      ;;
      delete)
        rm "$1"
      ;;
      *)
        rm "/tmp/thumb_$Date.png"
        exit 1
      ;;
    esac

    rm "/tmp/thumb_$Date.png"

}

OrganizeReplay() {

    GetWindowInfo
    local ReplayLocation="$1"
    local ReplayDir="${XDG_VIDEOS_DIR:-$HOME/Videos}/Replays"
    local WhiteListApps='^steam_app_|.exe|gamescope$|^Minecraft|RPCS3$'
    if [[ ( $WindowClass =~ $WhiteListApps ) ]]; then

        mkdir -p "$ReplayDir/$WindowTitle"
        mv "$ReplayLocation" "$ReplayDir/$WindowTitle/"
        local ReplayLocation="$ReplayDir/$WindowTitle/$(basename "$ReplayLocation")"
        #local ReplayLocation="`mv -v "$1" "$ReplayDir/$WindowTitle/" | grep -oP "\-> \K.*" | sed -s "s/'//g"`" # Probably less effecient

    fi
    echo "$ReplayLocation"

}

case $2 in
    regular)
        #Something similar can be done here for recordings but I don't use GSR for recordings
        notify-send -t 2000 -u low -a "GSR" "Recording Saved"
    ;;

    replay)
        #OrganizeReplay "$1" #uncomment this and comment out the line below, if you don't care about notifications.
        Notify "`OrganizeReplay "$1"`"
    ;;

    *)
        echo "Script is intended to run after GPU-screen-recorder saves a replay with the \"-sc path/to/script\" argument"
    ;;
esac
