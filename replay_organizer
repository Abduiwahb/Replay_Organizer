#!/usr/bin/env bash
set -e
#This script is only intended to run with GPU-screen-recorder under -sc flag.
#It also doesn't have any functionality to games running natively on linux.
#It simply checks if the window class has steam_* or *.exe in it, so it can fetch the window name and create a directory and move the replay into it.
#Something similar can be done with regular recordings, but I don't think it's effective.

ReplayDir="$HOME/Videos/Replays"

#Hyprland (requires jq)
#Get_Window_Class="hyprctl activewindow -j | jq -r '.class'"
#Get_Window_Name="hyprctl activewindow -j | jq -r '.title'"

#X11 (requires xdotool)
Get_Window_Class="xdotool getactivewindow getwindowclassname"
Get_Window_Name="xdotool getactivewindow getwindowname"

#KDE-Wayland
#Get_Window_Class="kdotool getactivewindow getwindowclassname"
#Get_Window_Name="kdotool getactivewindow getwindowname"

function organize_replays() {
    Window_Class=$($Get_Window_Class)
    if [[ ( $Window_Class == steam_app_* || $Window_Class == *.exe || $Window_Class == gamescope ) ]]; then

        GAME_NAME=$($Get_Window_Name);
        mkdir -p "$ReplayDir/$GAME_NAME"
        mv $1 "$ReplayDir/$GAME_NAME/"

    fi
    #OSD message because notification sometimes won't showup even when they're enabled in fullscreen apps
    #qdbus org.kde.plasmashell /org/kde/osdService org.kde.osdService.showText "$HOME/.icons/Apps/replay.svg" "Replay saved"
    notify-send -t 2000 -u low -a "GSR" "Replay Saved"
}

case $2 in
    regular)
        #Something similar can be done here for recordings but I feel it's not usefull enough
        notify-send -t 2000 -u low -a "GSR" "Recording Saved"
    ;;
    replay)
        organize_replays "$1"
    ;;
    *)
        echo "Script is intended to run after GPU-screen-recorder saves a replay with the "-sc path/to/script" argument"
    ;;
esac
